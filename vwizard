#!/bin/bash

#checks the project name does not contain spaces and or special characters
validate_project_name() {
    local project_name="$1"
    local pattern="^[a-zA-Z0-9_-]+$"

    if [[ $project_name =~ $pattern ]]; then
        return 0 # Valid project name
    else
        return 1 # Invalid project name
    fi
}

# Function to CD into the current folder
access_path()
{
    # Get the current directory
    current_path=$(pwd)

    # Print the current directory
    echo "Current directory: $current_path"

    # Extract the last component of the current directory path (the directory name)
    current_dir=$(basename "$current_path")

    # Print the directory name
    echo "Current directory name: $current_dir"
}

# Function to create a new Laravel project using Docker
create_laravel_project() {
    read -p "Enter project name: " project_name
    #docker run --rm -v $(pwd):/app composer create-project --prefer-dist laravel/laravel "$project_name" && sh -c "chown -R $(id -u):$(id -g) $project_name"
    docker run --rm -v "$(pwd)":/app composer create-project --prefer-dist laravel/laravel "$project_name"
    sudo chown -R "$USER":"$USER" "$project_name"
    echo "Ownership changed to $USER:$USER for '$project_name'."
    create_compose_dev_container "$project_name"
    change_mailhog_env "$project_name/.env"
    exit
}

# Function to create a new Laravel with Mysql 8 project using Docker
create_laravel_mysql_project() {
    read -p "Enter project name: " project_name
    #docker run --rm -v $(pwd):/app composer create-project --prefer-dist laravel/laravel "$project_name" && sh -c "chown -R $(id -u):$(id -g) $project_name"
    docker run --rm -v "$(pwd)":/app composer create-project --prefer-dist laravel/laravel "$project_name"
    sudo chown -R "$USER":"$USER" "$project_name"
    echo "Ownership changed to $USER:$USER for '$project_name'."

    create_dev_container "$project_name"
    create_dockerfile "$project_name"
    create_dockercomposefile "$project_name"
    #create_compose_dev_container "$project_name"

    # Get the directory containing this script
    SCRIPT_DIR="$(dirname "$0")"

    # Assuming the stubs directory is located alongside the script
    STUBS_DIR="$SCRIPT_DIR/.stubs"

    DIR=$project_name
    export DIR

    envsubst < "$STUBS_DIR/devcontainer/_laravel.stub" > "$DIR/.devcontainer/devcontainer.json"
    envsubst < "$STUBS_DIR/dockerfile/_laravel.stub" > "$DIR/.devcontainer/Dockerfile"
    envsubst < "$STUBS_DIR/compose/_laravel_mysql8.stub" > "$DIR/.devcontainer/docker-compose.yml"
    unset DIR

    change_dbcon_envfile "$project_name/.env" "mysql" "mysql" "$project_name"
    change_mailhog_env "$project_name/.env"

    exit
}

# Function to create a new Laravel with PostgresSQL project using Docker
create_laravel_pgsql_project() {
    read -p "Enter project name: " project_name
    #docker run --rm -v $(pwd):/app composer create-project --prefer-dist laravel/laravel "$project_name" && sh -c "chown -R $(id -u):$(id -g) $project_name"
    docker run --rm -v "$(pwd)":/app composer create-project --prefer-dist laravel/laravel "$project_name"
    sudo chown -R "$USER":"$USER" "$project_name"
    echo "Ownership changed to $USER:$USER for '$project_name'."

    create_dev_container "$project_name"
    create_dockerfile "$project_name"
    create_dockercomposefile "$project_name"
    #create_compose_dev_container "$project_name"

    # Get the directory containing this script
    SCRIPT_DIR="$(dirname "$0")"

    # Assuming the stubs directory is located alongside the script
    STUBS_DIR="$SCRIPT_DIR/.stubs"

    DIR=$project_name
    export DIR

    envsubst < "$STUBS_DIR/devcontainer/_laravel.stub" > "$DIR/.devcontainer/devcontainer.json"
    envsubst < "$STUBS_DIR/dockerfile/_laravel.stub" > "$DIR/.devcontainer/Dockerfile"
    envsubst < "$STUBS_DIR/compose/_laravel_pgsql.stub" > "$DIR/.devcontainer/docker-compose.yml"
    unset DIR

    change_dbcon_envfile "$project_name/.env" "pgsql" "pgsql" "$project_name"
    change_mailhog_env "$project_name/.env"

    exit
}

# Function to create a new NuxtJs project using Docker
create_nuxt_project() {
    read -p "Enter project name: " project_name

    validate_project_name "$project_name"

    if validate_project_name "$project_name"; then
        docker run --rm -v "$(pwd):/app" -w /app -it node:20.11.1-alpine sh -c "apk add --no-cache git && npm install -g pnpm && pnpm dlx nuxt@latest init $project_name && chown -R $(id -u):$(id -g) $project_name"
        sudo chown -R "$USER":"$USER" "$project_name"
        echo "Ownership changed to $USER:$USER for '$project_name'."
        echo "cleaning temporary files..."
        sudo rm -rf .pnpm-store 
        create_dev_container "$project_name"
        create_dockerfile "$project_name"
        

        # Get the directory containing this script
        SCRIPT_DIR="$(dirname "$0")"

        # Assuming the stubs directory is located alongside the script
        STUBS_DIR="$SCRIPT_DIR/.stubs"

        DIR=$project_name
        export DIR

        envsubst < "$STUBS_DIR/devcontainer/_nuxt.stub" > "$DIR/.devcontainer/devcontainer.json"
        envsubst < "$STUBS_DIR/dockerfile/_node.stub" > "$DIR/.devcontainer/Dockerfile"
        
        unset DIR

        exit
    else
        echo "Invalid project name. Please use only alphanumeric characters, hyphens, and underscores."
        exit
    fi

    
}

# Function to create a new NuxtJs with Mysql project using docker-compose
create_nuxt_mysql_project() {
    read -p "Enter project name: " project_name

    validate_project_name "$project_name"

    if validate_project_name "$project_name"; then
        docker run --rm -v "$(pwd):/app" -w /app -it node:20.11.1-alpine sh -c "apk add --no-cache git && npm install -g pnpm && pnpm dlx nuxt@latest init $project_name && chown -R $(id -u):$(id -g) $project_name"
        sudo chown -R "$USER":"$USER" "$project_name"
        echo "Ownership changed to $USER:$USER for '$project_name'."
        echo "cleaning temporary files..."
        sudo rm -rf .pnpm-store 
        create_dev_container "$project_name"
        create_dockerfile "$project_name"
        create_dockercomposefile "$project_name"

        # Get the directory containing this script
        SCRIPT_DIR="$(dirname "$0")"

        # Assuming the stubs directory is located alongside the script
        STUBS_DIR="$SCRIPT_DIR/.stubs"

        DIR=$project_name
        export DIR

        envsubst < "$STUBS_DIR/devcontainer/_nuxt_mysql.stub" > "$DIR/.devcontainer/devcontainer.json"
        envsubst < "$STUBS_DIR/dockerfile/_nuxt.stub" > "$DIR/.devcontainer/Dockerfile"
        envsubst < "$STUBS_DIR/compose/_nuxt_mysql.stub" > "$DIR/.devcontainer/docker-compose.yml"
        unset DIR

        exit
    else
        echo "Invalid project name. Please use only alphanumeric characters, hyphens, and underscores."
        exit
    fi

    
}

# Function to create a new NuxtJs with Pocketbase project using docker-compose
create_nuxt_pocketbase_project() {
    read -p "Enter project name: " project_name

    validate_project_name "$project_name"

    if validate_project_name "$project_name"; then
        docker run --rm -v "$(pwd):/app" -w /app -it node:20.11.1-alpine sh -c "apk add --no-cache git && npm install -g pnpm && pnpm dlx nuxt@latest init $project_name && chown -R $(id -u):$(id -g) $project_name"
        sudo chown -R "$USER":"$USER" "$project_name"
        echo "Ownership changed to $USER:$USER for '$project_name'."
        echo "cleaning temporary files..."
        sudo rm -rf .pnpm-store 
        create_dev_container "$project_name"
        create_dockerfile "$project_name"
        create_dockercomposefile "$project_name"

        # Get the directory containing this script
        SCRIPT_DIR="$(dirname "$0")"

        # Assuming the stubs directory is located alongside the script
        STUBS_DIR="$SCRIPT_DIR/.stubs"

        DIR=$project_name
        export DIR

        envsubst < "$STUBS_DIR/devcontainer/_nuxt_mysql.stub" > "$DIR/.devcontainer/devcontainer.json"
        envsubst < "$STUBS_DIR/dockerfile/_nuxt.stub" > "$DIR/.devcontainer/Dockerfile"
        envsubst < "$STUBS_DIR/compose/_nuxt_pocketbase.stub" > "$DIR/.devcontainer/docker-compose.yml"
        unset DIR

        exit
    else
        echo "Invalid project name. Please use only alphanumeric characters, hyphens, and underscores."
        exit
    fi

    
}

# Function to create a new NestJs project using Docker
create_nestjs_project() {
    read -p "Enter project name: " project_name
    #sudo docker run --rm -v "$(pwd):/app" -w /app -it node:20.11.1-alpine sh -c "apk add --no-cache git && npm install -g pnpm @nestjs/cli && nest new $project_name && chown -R $(id -u):$(id -g) $project_name"
    sudo docker run --rm -v "$(pwd):/app" -w /app -it node:20.11.1-alpine sh -c "apk add --no-cache git && npm install -g pnpm @nestjs/cli && nest new $project_name --strict --skip-git --package-manager=pnpm && chown -R $(id -u):$(id -g) $project_name"
    sudo chown -R "$USER":"$USER" "$project_name"
    echo "Ownership changed to $USER:$USER for '$project_name'."
    echo "cleaning temporary files..."
    sudo rm -rf .pnpm-store 

    create_dev_container "$project_name"
    create_dockerfile "$project_name"

    # Get the directory containing this script
    SCRIPT_DIR="$(dirname "$0")"

    # Assuming the stubs directory is located alongside the script
    STUBS_DIR="$SCRIPT_DIR/.stubs"

    DIR=$project_name
    export DIR

    envsubst < "$STUBS_DIR/devcontainer/_node.stub" > "$DIR/.devcontainer/devcontainer.json"
    envsubst < "$STUBS_DIR/dockerfile/_node.stub" > "$DIR/.devcontainer/Dockerfile"
    unset DIR

    exit
}

# Function to create a new Rust project using Rust's Cargo
create_rust_project(){
    read -p "Enter project name: " project_name
    sudo docker run --rm -v "$(pwd):/app" -w /app -it rust:slim-bookworm sh -c "cargo new $project_name && chown -R $(id -u):$(id -g) $project_name"
    docker pull rust:slim-bookworm
    sudo chown -R "$USER":"$USER" "$project_name"
    echo "Ownership changed to $USER:$USER for '$project_name'." 
    create_dev_container "$project_name"

    # Get the directory containing this script
    SCRIPT_DIR="$(dirname "$0")"

    # Assuming the stubs directory is located alongside the script
    STUBS_DIR="$SCRIPT_DIR/.stubs"

    DIR=$project_name
    export DIR

    envsubst < "$STUBS_DIR/devcontainer/_rust.stub" > "$DIR/.devcontainer/devcontainer.json"
    unset DIR
    exit
}

create_astrojs_basic_project(){
    #pnpm create astro@latest testfour --template blog --install --git --yes
    read -p "Enter project name: " project_name
    sudo docker run --rm -v "$(pwd):/app" -w /app -it node:20.11.1-alpine sh -c "apk add --no-cache git && npm install -g pnpm && pnpm create astro@latest $project_name --template basics --install --git --yes && chown -R $(id -u):$(id -g) $project_name"
    sudo chown -R "$USER":"$USER" "$project_name"
    echo "Ownership changed to $USER:$USER for '$project_name'."
    echo "cleaning temporary files..."
    sudo rm -rf .pnpm-store 

    create_dev_container "$project_name"
    create_dockerfile "$project_name"

    # Get the directory containing this script
    SCRIPT_DIR="$(dirname "$0")"

    # Assuming the stubs directory is located alongside the script
    STUBS_DIR="$SCRIPT_DIR/.stubs"

    DIR=$project_name
    export DIR

    envsubst < "$STUBS_DIR/devcontainer/_astro.stub" > "$DIR/.devcontainer/devcontainer.json"
    envsubst < "$STUBS_DIR/dockerfile/_astro.stub" > "$DIR/.devcontainer/Dockerfile"
    unset DIR

    exit
}

create_astrojs_blog_project(){
    #pnpm create astro@latest testfour --template blog --install --git --yes
    read -p "Enter project name: " project_name
    sudo docker run --rm -v "$(pwd):/app" -w /app -it node:20.11.1-alpine sh -c "apk add --no-cache git && npm install -g pnpm && pnpm create astro@latest $project_name --template blog --install --git --yes && chown -R $(id -u):$(id -g) $project_name"
    sudo chown -R "$USER":"$USER" "$project_name"
    echo "Ownership changed to $USER:$USER for '$project_name'."
    echo "cleaning temporary files..."
    sudo rm -rf .pnpm-store 

    create_dev_container "$project_name"
    create_dockerfile "$project_name"

    # Get the directory containing this script
    SCRIPT_DIR="$(dirname "$0")"

    # Assuming the stubs directory is located alongside the script
    STUBS_DIR="$SCRIPT_DIR/.stubs"

    DIR=$project_name
    export DIR

    envsubst < "$STUBS_DIR/devcontainer/_astro.stub" > "$DIR/.devcontainer/devcontainer.json"
    envsubst < "$STUBS_DIR/dockerfile/_astro.stub" > "$DIR/.devcontainer/Dockerfile"
    unset DIR

    exit
}

# Function to create a new Refine.dev project using Docker
create_refine_project() {
    read -p "Enter project name: " project_name

    validate_project_name "$project_name"
    if validate_project_name "$project_name"; then
        sudo docker run --rm -v "$(pwd):/app" -w /app -it node:20.11.1-alpine sh -c "apk add --no-cache git && npm install create-refine-app && npm create refine-app@latest $project_name && chown -R $(id -u):$(id -g) "
        sudo chown -R "$USER":"$USER" "$project_name"
        echo "Ownership changed to $USER:$USER for '$project_name'."
        create_dev_container "$project_name"
        create_dockerfile "$project_name"

        # Get the directory containing this script
        SCRIPT_DIR="$(dirname "$0")"

        # Assuming the stubs directory is located alongside the script
        STUBS_DIR="$SCRIPT_DIR/.stubs"

        DIR=$project_name
        export DIR

        envsubst < "$STUBS_DIR/devcontainer/_node.stub" > "$DIR/.devcontainer/devcontainer.json"
        envsubst < "$STUBS_DIR/dockerfile/_node18.stub" > "$DIR/.devcontainer/Dockerfile"
        unset DIR

        exit
    else
        echo "Invalid project name. Please use only alphanumeric characters, hyphens, and underscores."
        exit
    fi
}

create_dev_container(){
    local project_name=$1
    # Create the .devcontainer folder inside the project directory
    devcontainer_dir="$project_name/.devcontainer"
    mkdir "$devcontainer_dir"
    echo "Folder '.devcontainer' created inside '$project_name'."

    # Create a default.json file inside the .devcontainer folder
    touch "$devcontainer_dir/devcontainer.json"
    echo "devcontainer.json created successfully inside '$devcontainer_dir'."
}

create_dockerfile()
{
    local project_name=$1
    devcontainer_dir="$project_name/.devcontainer"

    # Create a Dockerfile inside the .devcontainer folder
    touch "$devcontainer_dir/Dockerfile"
    echo "Dockerfile created successfully inside '$devcontainer_dir'."
}

create_dockercomposefile()
{
    local project_name=$1
    devcontainer_dir="$project_name/.devcontainer"

    # Create a Dockerfile inside the .devcontainer folder
    touch "$devcontainer_dir/docker-compose.yml"
    echo "docker-compose.yml File created successfully inside '$devcontainer_dir'."
}

create_compose_dev_container(){
    local project_name=$1
    # Create the .devcontainer folder inside the project directory
    devcontainer_dir="$project_name/.devcontainer"
    mkdir "$devcontainer_dir"
    echo "Folder '.devcontainer' created inside '$project_name'."

    # Get the directory containing this script
    SCRIPT_DIR="$(dirname "$0")"

    # Assuming the stubs directory is located alongside the script
    STUBS_DIR="$SCRIPT_DIR/.stubs"

    DIR=$project_name
    export DIR

    # Create a default.json file inside the .devcontainer folder
    touch "$devcontainer_dir/devcontainer.json"
    echo "devcontainer.json created successfully inside '$devcontainer_dir'."
    
    envsubst < "$STUBS_DIR/devcontainer/_laravel.stub" > "$DIR/.devcontainer/devcontainer.json"

    
    #No longer needed because frankenPHP always looks for /app folder
    #sed -i 's/LOCAL_WORKSPACE_FOLDER_BASENAME/${localWorkspaceFolderBasename}/g' "$devcontainer_dir/devcontainer.json"

    # Create a default docker-compose.yml file
    touch "$devcontainer_dir/Dockerfile" #for now empty
    touch "$devcontainer_dir/docker-compose.yml"

    laravel_compose_file "$devcontainer_dir" "$STUBS_DIR"

    unset DIR
}

# Replace the docker-compose.yml file with a default
compose_file(){
    envsubst < "$2/compose/_base.stub" > "$1/docker-compose.yml"
}

# Replace the docker-compose.yml file with the one for laravel
laravel_compose_file(){
    envsubst < "$2/dockerfile/_laravel.stub" > "$1/Dockerfile"
    envsubst < "$2/compose/_laravel.stub" > "$1/docker-compose.yml"
}

# Function to change values in .env file
change_dbcon_envfile() {
    local env_file="$1"
    local new_db_connection="$2"
    local new_db_host="$3"
    local projectname="$4"

    if [ -f "$env_file" ]; then
        # Set default values for Mysql
        sed -i "s/DB_CONNECTION=.*/DB_CONNECTION=$new_db_connection/" "$env_file"
        sed -i "s/^# *DB_HOST=.*/DB_HOST=$new_db_host/" "$env_file"
        sed -i "s/^# *DB_PORT=.*/DB_PORT=3306/" "$env_file"
        sed -i "s/^# *DB_DATABASE=.*/DB_DATABASE=$projectname/" "$env_file"
        sed -i "s/^# *DB_USERNAME=.*/DB_USERNAME=dbuser/" "$env_file"
        sed -i "s/^# *DB_PASSWORD=.*/DB_PASSWORD=dbpassword/" "$env_file"

        echo "DB_CONNECTION set to $new_db_connection and DB_HOST set to $new_db_host in $env_file"
    else
        echo "$env_file not found."
    fi
}

# create a marp presentation
create_marp_presentation() {
    read -p "Enter project name: " project_name
    mkdir "$project_name"
    create_dev_container "$project_name"
    create_dockerfile "$project_name"

    # Get the directory containing this script
    SCRIPT_DIR="$(dirname "$0")"

    # Assuming the stubs directory is located alongside the script
    STUBS_DIR="$SCRIPT_DIR/.stubs"

    DIR=$project_name
    export DIR

    envsubst < "$STUBS_DIR/devcontainer/_marp.stub" > "$DIR/.devcontainer/devcontainer.json"
    envsubst < "$STUBS_DIR/dockerfile/_node18.stub" > "$DIR/.devcontainer/Dockerfile"
    unset DIR

    exit
}

change_mailhog_env(){
    local env_file="$1"

    if [ -f "$env_file" ]; then
        # Set default values for Mysql
        sed -i "s/MAIL_MAILER=.*/MAIL_MAILER=smtp/" "$env_file"
        sed -i "s/MAIL_HOST=.*/MAIL_HOST=mailhog/" "$env_file"
        sed -i "s/MAIL_PORT=.*/MAIL_PORT=1025/" "$env_file"

        echo "MAILHOG set in $env_file"
    else
        echo "$env_file not found."
    fi
}

print_banner(){
echo "██╗   ██╗██╗    ██╗██╗███████╗ █████╗ ██████╗ ██████╗  "
echo "██║   ██║██║    ██║██║╚══███╔╝██╔══██╗██╔══██╗██╔══██╗ "
echo "██║   ██║██║ █╗ ██║██║  ███╔╝ ███████║██████╔╝██║  ██║ "
echo "╚██╗ ██╔╝██║███╗██║██║ ███╔╝  ██╔══██║██╔══██╗██║  ██║ "
echo " ╚████╔╝ ╚███╔███╔╝██║███████╗██║  ██║██║  ██║██████╔╝ "
echo "  ╚═══╝   ╚══╝╚══╝ ╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝  "

}


clear


print_banner

access_path
# Main Menu
# Interactive menu
PS3="Select an option: "
options=("Create a new Laravel project" "Create a new Laravel With MySQL-8 project" "Create a new Laravel With PGSQL-16 project" "Create a new Nuxt.Js project" "Create a new Nuxt.Js with Mysql project" "Create a new Nuxt.Js with Pocketbase project" "Create a new NestJs project" "Create a new Refine.dev project" "Create a new Rust project" "Create a new AstroJs Basic project" "Create a new AstroJs Blog project" "Create MARP Presentation" "Quit")

select opt in "${options[@]}"; do
    case $REPLY in
        1) sleep 1; clear; create_laravel_project ;;
        2) sleep 1; clear; create_laravel_mysql_project ;;
        3) sleep 1; clear; create_laravel_pgsql_project ;;
        4) sleep 1; clear; create_nuxt_project ;;
        5) sleep 1; clear; create_nuxt_mysql_project;;
        6) sleep 1; clear; create_nuxt_pocketbase_project;;
        7) sleep 1; clear; create_nestjs_project ;;
        8) sleep 1; clear; create_refine_project;;
        9) sleep 1; clear; create_rust_project;;
        10) sleep 1; clear; create_astrojs_basic_project;;
        11) sleep 1; clear; create_astrojs_blog_project;;
        12) sleep 1; clear; create_marp_presentation;;
        13) echo "Exiting..."; exit ;;
        *) echo "Invalid option. Please select again." ;;
    esac
done
